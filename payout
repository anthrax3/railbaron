#!/usr/bin/perl
# Copyright (c) 2017 Bob Beck <beck@obtuse.com>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

=head1 NAME

payout - Compute the payout for travel between two cities in a game of Rail Baron

=head1 SYNOPSIS
	
	payout startcity endcity

=head1 DESCRIPTION

"payout" computes the payout for travel between two cities in a game
of Rail Baron. The payout is in thousands of dollars. 

City names may be specified case insensitively or without
spaces. Incomplete names will attempt to match a city based on the
portion specified.

"Portland OR" and "Portland ME" are used to disambiguate the two
different Portlands.

=head1 EXAMPLES

	payout "San Francisco" "Portland ME"
	payout "New York" "Portland OR"
        payout "newy" "portlando"

=head1 AUTHOR

Bob Beck <beck@obtuse.com>

=head1 SEE ALSO

	 roll

=cut

use strict;
use Text::CSV;


my $paydata = "./Payout.csv";
my $startcity=shift;
my $endcity=shift;

($startcity && $endcity) || die "usage: payout startcity endcity";

my $csv=Text::CSV->new();
open my $infile ,$paydata or die "Can't open file $paydata";

my @cols = @{$csv->getline ($infile)};
my $row = {};
$csv->bind_columns (\@{$row}{@cols});

foreach my $city (@cols) {
    next if $city eq "City";
    $startcity = &citymatch($startcity, $city);
    $endcity = &citymatch($endcity, $city);
}

while ($csv->getline ($infile)) {
    if (($row->{"City"}) eq $startcity) {
	print "Payout for ", $row->{"City"}, " to $endcity is ", $row->{"$endcity"}, "\n";
    }
}

sub citymatch() {
    my $userinput = $_[0];
    my $candidate = $_[1];
    if (lc $userinput eq lc $candidate) {
	return $candidate;
    }
    my $nospace = $candidate;
    $nospace =~ s/ //g;
    if (lc $userinput eq lc $nospace) {
	return $candidate;
    }
    if (lc $userinput eq substr(lc $candidate, 0, length($userinput))) {
	return $candidate;
    }
    if (lc $userinput eq substr(lc $nospace, 0, length($userinput))) {
	return $candidate;
    }
    # no match, keep it the same;
    return $userinput
}
